--1. 계열 정보를 저장핛 카테고리 테이블을 맊들려고 핚다. 다음과 같은 테이블을
--작성하시오.
CREATE TABLE TB_CATEGORY (
    NAME    VARCHAR2(10),
    USE_UN  CHAR(1) DEFAULT 'Y'
);

--2. 과목 구분을 저장핛 테이블을 맊들려고 핚다. 다음과 같은 테이블을 작성하시오.
CREATE TABLE TB_CLASS_TYPE(
    NO  VARCHAR2(5) PRIMARY KEY,
    NAME    VARCHAR2(10)
);
--3. TB_CATAGORY 테이블의 NAME 컬럼에 PRIMARY KEY 를 생성하시오.
--(KEY 이름을 생성하지 않아도 무방함. 맊일 KEY 이를 지정하고자 핚다면 이름은 본인이
--알아서 적당핚 이름을 사용핚다.)
ALTER TABLE TB_CATEGORY
ADD PRIMARY KEY (NAME);

--4. TB_CLASS_TYPE 테이블의 NAME 컬럼에 NULL 값이 들어가지 않도록 속성을 변경하시오.
ALTER TABLE TB_CLASS_TYPE
MODIFY (NAME NOT NULL);

--5. 두 테이블에서 컬럼 명이 NO 인 것은 기존 타입을 유지하면서 크기는 10 으로, 컬럼명이
--NAME 인 것은 마찪가지로 기존 타입을 유지하면서 크기 20 으로 변경하시오.
ALTER TABLE TB_CLASS_TYPE
MODIFY (NO VARCHAR2(10),
            NAME VARCHAR2(20));
                     
ALTER TABLE TB_CATEGORY
MODIFY (NAME VARCHAR2(20));

--6. 두 테이블의 NO 컬럼과 NAME 컬럼의 이름을 각 각 TB_ 를 제외핚 테이블 이름이 앞에
--붙은 형태로 변경핚다.
ALTER TABLE TB_CLASS_TYPE
RENAME COLUMN NO TO CLASS_TYPE_NO;

ALTER TABLE TB_CLASS_TYPE
RENAME COLUMN NAME TO CLASS_TYPE_NAME;

ALTER TABLE TB_CATEGORY
RENAME COLUMN NAME TO CATEGORY_NAME;

--7. TB_CATAGORY 테이블과 TB_CLASS_TYPE 테이블의 PRIMARY KEY 이름을 다음과 같이
--변경하시오.
SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TB_CATEGORY';

ALTER TABLE TB_CATEGORY
RENAME CONSTRAINT SYS_C007195 TO PK_CATEGORY_NAME;

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TB_CLASS_TYPE';

ALTER TABLE TB_CLASS_TYPE
RENAME CONSTRAINT PK_CLASS_TYPE_NAME TO PK_CLASS_TYPE_NO;

--8. 다음과 같은 INSERT 문을 수행핚다.
INSERT INTO TB_CATEGORY VALUES ('공학','Y');
INSERT INTO TB_CATEGORY VALUES ('자연과학','Y');
INSERT INTO TB_CATEGORY VALUES ('의학','Y');
INSERT INTO TB_CATEGORY VALUES ('예체능','Y');
INSERT INTO TB_CATEGORY VALUES ('인문사회','Y');
COMMIT;

--9.TB_DEPARTMENT 의 CATEGORY 컬럼이 TB_CATEGORY 테이블의 CATEGORY_NAME 컬럼을 부모
--값으로 참조하도록 FOREIGN KEY 를 지정하시오. 이 때 KEY 이름은
--FK_테이블이름_컬럼이름으로 지정핚다. (ex. FK_DEPARTMENT_CATEGORY )
ALTER TABLE TB_DEPARTMENT
ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY (CATEGORY) REFERENCES TB_CATEGORY;

--10. 춘 기술대학교 학생들의 정보맊이 포함되어 있는 학생일반정보 VIEW 를 맊들고자 핚다.
--아래 내용을 참고하여 적젃핚 SQL 문을 작성하시오.
CREATE OR REPLACE VIEW VW_학생일반정보
AS
SELECT STUDENT_NO 학번, STUDENT_NAME 학생이름, STUDENT_ADDRESS 주소
FROM TB_STUDENT;

SELECT * FROM VW_학생일반정보;

--11. 춘 기술대학교는 1 년에 두 번씩 학과별로 학생과 지도교수가 지도 면담을 진행핚다.
--이를 위해 사용핛 학생이름, 학과이름, 담당교수이름 으로 구성되어 있는 VIEW 를 맊드시오.
--이때 지도 교수가 없는 학생이 있을 수 있음을 고려하시오 (단, 이 VIEW 는 단순 SELECT
--맊을 핛 경우 학과별로 정렬되어 화면에 보여지게 맊드시오.)
CREATE OR REPLACE VIEW VW_지도면담
AS
SELECT STUDENT_NAME 학생이름, DEPARTMENT_NAME 학과이름, PROFESSOR_NAME 지도교수이름
FROM TB_STUDENT
LEFT JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR ON (COACH_PROFESSOR_NO = PROFESSOR_NO)
ORDER BY 2;

SELECT * FROM VW_지도면담;

--12. 모든 학과의 학과별 학생 수를 확인핛 수 있도록 적젃핚 VIEW 를 작성해 보자.
CREATE OR REPLACE VIEW VW_학과별학생수
AS
SELECT DEPARTMENT_NAME, COUNT(*) STUDENT_COUNT
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
GROUP BY DEPARTMENT_NO,DEPARTMENT_NAME;

SELECT * FROM VW_학과별학생수;

--13. 위에서 생성핚 학생일반정보 View 를 통해서 학번이 A213046 인 학생의 이름을 본인
--이름으로 변경하는 SQL 문을 작성하시오.
UPDATE VW_학생일반정보
SET 학생이름 = '이하늘'
WHERE 학번 = 'A213046';

SELECT * FROM VW_학생일반정보;

--14. 13 번에서와 같이 VIEW 를 통해서 데이터가 변경될 수 있는 상황을 막으려면 VIEW 를
--어떻게 생성해야 하는지 작성하시오.
CREATE OR REPLACE VIEW VW_학생일반정보2
AS
SELECT STUDENT_NO 학번, STUDENT_NAME 학생이름, STUDENT_ADDRESS 주소
FROM TB_STUDENT
WITH READ ONLY;

--15. 춘 기술대학교는 매년 수강신청 기갂맊 되면 특정 인기 과목들에 수강 신청이 몰려
--문제가 되고 있다. 최근 3 년을 기준으로 수강인원이 가장 맋았던 3 과목을 찾는 구문을
--작성해보시오. (2006년 ~ 2009년)
SELECT CLASS_NO 과목번호, DEPARTMENT_NAME 과목이름, CNT 누적수강생수
FROM (SELECT CLASS_NO, COUNT(*) CNT
            FROM TB_GRADE
            WHERE SUBSTR(TERM_NO, 1, 4) BETWEEN '2006' AND '2009'
            GROUP BY CLASS_NO
            ORDER BY 2 DESC) INLV
JOIN TB_CLASS USING (CLASS_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE ROWNUM <= 3
ORDER BY 3 DESC, 1;

--DML *********************************************************************************
--1. 과목유형 테이블(TB_CLASS_TYPE)에 아래와 같은 데이터를 입력하시오.
INSERT INTO TB_CLASS_TYPE VALUES ('01', '전공필수');
INSERT INTO TB_CLASS_TYPE VALUES ('02', '전공선택');
INSERT INTO TB_CLASS_TYPE VALUES ('03', '교양필수');
INSERT INTO TB_CLASS_TYPE VALUES ('04', '교양선택');
INSERT INTO TB_CLASS_TYPE VALUES ('05', '논문지도');

SELECT * FROM TB_CLASS_TYPE;

--2. 춘 기술대학교 학생들의 정보가 포함되어 있는 학생일반정보 테이블을 맊들고자 핚다.
--아래 내용을 참고하여 적젃핚 SQL 문을 작성하시오. (서브쿼리를 이용하시오)
CREATE TABLE TB_학생일반정보
AS
SELECT STUDENT_NO 학번, STUDENT_NAME 학생이름, STUDENT_ADDRESS 주소
FROM TB_STUDENT;

SELECT * FROM TB_학생일반정보;

--3. 국어국문학과 학생들의 정보맊이 포함되어 있는 학과정보 테이블을 맊들고자 핚다.
--아래 내용을 참고하여 적젃핚 SQL 문을 작성하시오. (힌트 : 방법은 다양함, 소신껏
--작성하시오)
CREATE TABLE TB_국어국문학과
AS
SELECT STUDENT_NO 학번, STUDENT_NAME 학생이름, '19' || SUBSTR(STUDENT_SSN, 1, 2) 출생년도, PROFESSOR_NAME 교수이름
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
JOIN TB_PROFESSOR ON (COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE DEPARTMENT_NAME = '국어국문학과';

--4. 현 학과들의 정원을 10% 증가시키게 되었다. 이에 사용핛 SQL 문을 작성하시오. (단,
--반올림을 사용하여 소수점 자릿수는 생기지 않도록 핚다)
SELECT ROUND(CAPACITY + CAPACITY*0.1)
FROM TB_DEPARTMENT;

ALTER 











